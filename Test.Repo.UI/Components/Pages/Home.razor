@page "/"
@using System.Reactive.Linq

@inject FullscreenService fsService
@inject DocumentKeyboardEventService dkbsService
@inject DocumentPasteEventService dpsService


<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<TimedScope Period="@TimeSpan.FromSeconds(1)">
  <CurrentTime Now="@DateTime.Now" />
</TimedScope>
<TimedScope Period="@TimeSpan.FromSeconds(1)" EventOnly>
  <CurrentTime Now="@DateTime.Now" />
</TimedScope>

<button @onclick="@AllFullscreen">all</button>
<button @onclick="@DivFullscreen">Div</button>
<div id="div">
  Hi I am DIV
</div>

@code {
  private DateTime _now = DateTime.Now;
  private DocumentKeyboardEventSource? source;
  private DocumentPasteEventSource? pasteSource;

  private IObservable<string>? CardId;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (source is null)
    {
      source = await dkbsService.Connect();
      source.KeyPress += KeyPress!;

      @* TODO: guarda per fc *@
      CardId = Observable.FromEventPattern<KeyboardEventArgs>(source, nameof(source.KeyPress))
      .Select(p => p.EventArgs.Key)
      .Buffer(TimeSpan.FromMilliseconds(5000), 3 + 1)
      .Where(p => p.LastOrDefault() == "Enter")
      .Select(p => string.Join("", p.SkipLast(1)))
      .Where(p => p.Length == 3);

      CardId.Subscribe(p => Console.WriteLine(p));
    }

    if (pasteSource is null)
    {
      pasteSource = await dpsService.Connect();
      pasteSource.Paste += Paste!;
    }
  }
  private async Task AllFullscreen()
  {
    await fsService.OpenFullscreen();
  }
  private async Task DivFullscreen()
  {
    await fsService.OpenFullscreen("#div");
  }
  private void KeyPress(object sender, KeyboardEventArgs evt)
  {
    Console.WriteLine(evt.Key);
  }

  private void Paste(object sender, PasteEventArgs evt)
  {
    Task.Run(async () =>
    {
      Console.WriteLine(evt);
      Console.WriteLine(evt.Files.Count());
      foreach (var file in evt.Files)
      {
        try
        {
          var streamRef = await pasteSource.ReadFile(file.FileId, true);
          Console.WriteLine($"{file.Name}, size: {streamRef.Length}");

          using var stream = await streamRef.OpenReadStreamAsync(maxAllowedSize: 100_000_000);
          using var reader = new StreamReader(stream);

          Console.WriteLine(await reader.ReadToEndAsync());
        }
        catch (Exception e)
        {
          Console.WriteLine(e.Message);
        }
      }
    });
  }
}
