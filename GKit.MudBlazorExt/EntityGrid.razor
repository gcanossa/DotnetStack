@using GKit.BlazorExt
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging

@attribute [CascadingTypeParameter(nameof(T))]
@typeparam T where T : class
@typeparam TDialog where TDialog : IEditEntityDialog<T>, IComponent

@inject ISnackbar snackbar
@inject IDialogService dialogService
@inject ILogger<EntityGrid<T, TDialog>> logger
@inject DownloadFileService downloadFileService

<MudDataGrid @ref="_dataGrid" T="T" VirtualizeServerData="LoadServerData" Height="75vh" ItemSize="43" FixedHeader
  FixedFooter Filterable SortMode="SortMode.Multiple" Virtualize Dense Hover ShowColumnOptions
  RowClassFunc="RowClassFunc" Loading="_loading">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@Title</MudText>
    <MudSpacer />
    @if (HeaderControls != null)
    {
      @HeaderControls
    }
    @if (Exportable)
    {
      <MudFab StartIcon="@Icons.Material.Filled.Download" Size="Size.Small" Color="Color.Default"
        OnClick="() => ExportXlsAsync()" Class="mx-2" />
    }
    <MudFab StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="() => NewAsync()"
      Class="mx-2" />
  </ToolBarContent>
  <Columns>
    <TemplateColumn CellClass="d-flex justify-end" HeaderStyle="width: 6rem;" StickyLeft="true">
      <CellTemplate>
        <MudStack Row>
          <MudTooltip Text="Modifica">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" aria-label="edit"
              OnClick="() => EditAsync(context.Item)" />
          </MudTooltip>
          <MudTooltip Text="Elimina">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete"
              Color="Color.Error" OnClick="() => DeleteAsync(context.Item)" />
          </MudTooltip>
          @if (Controls != null)
          {
            @Controls(context)
          }
        </MudStack>
      </CellTemplate>
    </TemplateColumn>
    @Columns
  </Columns>
  <NoRecordsContent>
    <MudStack>
      <MudText Typo="Typo.body1">Nessun elemento presente</MudText>
    </MudStack>
  </NoRecordsContent>
</MudDataGrid>

@code {
  [Parameter]
  public string? Title { get; set; }

  [Parameter]
  public RenderFragment HeaderControls { get; set; } = default!;

  [Parameter]
  public RenderFragment<CellContext<T>> Controls { get; set; } = default!;

  [Parameter, EditorRequired]
  public RenderFragment Columns { get; set; } = default!;

  [Parameter, EditorRequired]
  public Func<DbContext, IQueryable<T>> QueryFactory { get; set; } = default!;

  [Parameter, EditorRequired]
  public Func<DbContext, T, T> AttachEntityFunc { get; set; } = (ctx, entity) => entity;

  [Parameter]
  public Func<T, string> ToStringFunc { get; set; } = default!;

  [Parameter]
  public bool Exportable { get; set; } = false;

  [Parameter]
  public Func<T, int, string> RowClassFunc { get; set; } = default!;

  [Parameter]
  public EventCallback<GridStateVirtualize<T>> OnLoadedServerData { get; set; } = default!;

  [CascadingParameter]
  public DbContextFactoryScope? FactoryScope { get; set; }

  [Parameter]
  public Func<CancellationToken, Task<DbContext>>? ContextFactory { get; set; }

  protected Func<CancellationToken, Task<DbContext>> ContextFactoryFunc =>
  FactoryScope?.ContextFactory ?? ContextFactory ?? throw new ArgumentNullException(nameof(ContextFactoryFunc));

  private bool _loading = false;

  MudDataGrid<T> _dataGrid = default!;

  public IEnumerable<IFilterDefinition<T>> FilterDefinitions => _dataGrid.FilterDefinitions;
}