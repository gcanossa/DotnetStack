@using GKit.BlazorExt
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging

@attribute [CascadingTypeParameter(nameof(T))]
@typeparam T where T : class
@typeparam TDialog where TDialog : IEditEntityDialog<T>, IComponent

@inject ISnackbar snackbar
@inject IDialogService dialogService
@inject ILogger<EntityGrid<T, TDialog>> logger
@inject DownloadFileService downloadFileService

<MudDataGrid @ref="_dataGrid" T="T" VirtualizeServerData="LoadServerData" Height="75vh" ItemSize="43" FixedHeader
  FixedFooter Filterable SortMode="SortMode.Multiple" Virtualize Dense Hover ShowColumnOptions
  DragDropColumnReordering="@DragDropColumnReordering" DragIndicatorIcon="@Icons.Material.Filled.DragIndicator"
  ApplyDropClassesOnDragStarted="true" RowClassFunc="RowClassFunc" Loading="_loading">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@Title</MudText>
    <MudSpacer />
    @if (HeaderControls != null)
    {
      @HeaderControls
    }
    @if (Exportable)
    {
      <MudFab StartIcon="@Icons.Material.Filled.Download" Size="Size.Small" Color="Color.Default"
        OnClick="() => ExportXlsAsync()" Class="mx-2" />
    }
    @if (Refreshable)
    {
      <MudFab StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Small" Color="Color.Default"
        OnClick="() => RefreshDataAsync()" Class="mx-2" />
    }
    <MudFab StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="() => NewAsync()"
      Class="mx-2" />
  </ToolBarContent>
  <Columns>
    <TemplateColumn CellClass="d-flex justify-end" HeaderStyle="width: 6rem;" StickyLeft="true">
      <CellTemplate>
        @if (RowControlsVariant == EntityGridRowControlsVariant.Expanded)
        {
          <MudStack Row>
            @foreach (var control in _defaultControls.Concat(RowControls))
            {
              <MudTooltip Text="@control.Text">
                <MudIconButton Icon="@control.Icon" Size="Size.Small" Color="@control.Color"
                  OnClick="() => control.Action.Invoke(context)" Disabled="@(control.Disabled?.Invoke(context) ?? false)" />
              </MudTooltip>
            }
          </MudStack>
        }
        else if (RowControlsVariant == EntityGridRowControlsVariant.Menu)
        {
          <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu" Dense Size="Size.Small">
            @foreach (var control in _defaultControls.Concat(RowControls))
            {
              <MudMenuItem Icon="@control.Icon" IconColor="@control.Color" Label="@control.Text" Size="Size.Small"
                OnClick="() => control.Action.Invoke(context)" Disabled="@(control.Disabled?.Invoke(context) ?? false)" />
            }
          </MudMenu>
        }
      </CellTemplate>
    </TemplateColumn>
    @Columns
  </Columns>
  <NoRecordsContent>
    <MudStack>
      <MudText Typo="Typo.body1">Nessun elemento presente</MudText>
    </MudStack>
  </NoRecordsContent>
</MudDataGrid>

@code {

  private ICollection<EntityGridRowControlDescriptor<T>> _defaultControls = [];

  [Parameter]
  public string? Title { get; set; }

  [Parameter]
  public RenderFragment HeaderControls { get; set; } = default!;

  [Parameter]
  public ICollection<EntityGridRowControlDescriptor<T>> RowControls { get; set; } = [];

  [Parameter]
  public EntityGridRowControlsVariant RowControlsVariant { get; set; } = EntityGridRowControlsVariant.Expanded;

  [Parameter, EditorRequired]
  public RenderFragment Columns { get; set; } = default!;

  [Parameter, EditorRequired]
  public Func<DbContext, IQueryable<T>> QueryFactory { get; set; } = default!;

  [Parameter]
  public Func<T, string> ToStringFunc { get; set; } = default!;

  [Parameter]
  public bool Exportable { get; set; } = false;

  [Parameter]
  public bool Refreshable { get; set; } = false;

  [Parameter]
  public Func<T, int, string> RowClassFunc { get; set; } = default!;

  [Parameter]
  public EventCallback<GridStateVirtualize<T>> OnLoadedServerData { get; set; } = default!;

  [Parameter, EditorRequired]
  public Func<DbContext> ContextFactory { get; set; } = default!;

  [Parameter]
  public bool DragDropColumnReordering { get; set; } = false;

  private bool _loading = false;

  MudDataGrid<T> _dataGrid = default!;

  public IEnumerable<IFilterDefinition<T>> FilterDefinitions => _dataGrid.FilterDefinitions;
}