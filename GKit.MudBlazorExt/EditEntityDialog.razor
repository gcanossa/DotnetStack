@using FluentValidation
@using GKit.BlazorExt
@using Microsoft.EntityFrameworkCore
@typeparam T where T : class
  @typeparam TForm where TForm : IComponent, IEditEntityForm<T>

@inject HtmlAttrSetterService setter

<MudDialog>
  <TitleContent>
    <MudText Typo="Typo.h6">@Title</MudText>
  </TitleContent>
  <DialogContent>
    <div @ref="container">
      <MudForm @ref="_form" Model="@Model" Validation="@(Validator.ValidateValueAsync)" ValidationDelay="0"
               IsValidChanged="p => { }" IsTouchedChanged="p => { }">
        <DynamicComponent Type="typeof(TForm)" Parameters="_formParameters"/>
      </MudForm>
    </div>
  </DialogContent>
  <DialogActions>
    <MudStack Row>
      <MudButton Color="Color.Primary" OnClick="SubmitAsync" Disabled="!(_form?.IsTouched ?? false)">Salva</MudButton>
      <MudButton Color="Color.Error" OnClick="CancelAsync">Annulla</MudButton>
    </MudStack>
  </DialogActions>
</MudDialog>

@code {
  protected MudForm? _form;
  ElementReference container;

  [CascadingParameter] protected IMudDialogInstance _mudDialog { get; set; } = default!;

  [Parameter] public string Title { get; set; } = "Modifica Elemento";

  [Parameter] public T Model { get; set; } = default!;

  [Parameter] public DbContext Context { get; set; } = default!;

  protected Dictionary<string, object> _formParameters = new Dictionary<string, object>();

  protected override void OnParametersSet()
  {
    Model = Model ?? EmptyValueFactory();

    _formParameters = new Dictionary<string, object>()
    {
      { nameof(IEditEntityForm<T>.Model), Model },
      { nameof(IEditEntityForm<T>.Context), Context }
    };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await setter.SetAttributes(container, new Dictionary<string, object>() { { "autocomplete", "--off" } }, "input");

    await base.OnAfterRenderAsync(firstRender);
  }

  protected async Task SubmitAsync()
  {
    await _form!.Validate();
    if (_form.IsValid)
      _mudDialog.Close<T>(Model);
  }

  protected async Task CancelAsync()
  {
    _form!.ResetValidation();
    _mudDialog.Cancel();
  }

}