@using GKit.BlazorExt
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@using Microsoft.Extensions.Logging
@typeparam T where T : class

@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@inject IDialogService dialogService
@inject ILogger<EntityAutocomplete<T>> logger

<MudAutocomplete T="T" @ref="component" For="@For" Label="@Label" ToStringFunc="@ToStringFunc" SearchFunc="Search"
  Clearable Value="@Value" ValueChanged="ValueChangedHandler" ShowProgressIndicator Disabled="Disabled"
  ResetValueOnEmptyText>
  <NoItemsTemplate>
    <MudStack Row Justify="Justify.Center" Style="border-bottom: 1px solid lightgray;">
      @if (EditDialog != null)
      {
        <MudButton Color="Color.Primary" OnClick="NewAsync">Aggiungi</MudButton>
      }
      @if (EntitiesHref != null)
      {
        <MudButton OnClick="() => navigationManager.NavigateTo(EntitiesHref)">Apri Anagrafica</MudButton>
      }
    </MudStack>
    <MudText>Nessun elemento trovato</MudText>
  </NoItemsTemplate>
  <BeforeItemsTemplate>
    <MudStack Row Justify="Justify.Center" Style="border-bottom: 1px solid lightgray;">
      @if (EditDialog != null)
      {
        <MudButton Color="Color.Primary" OnClick="NewAsync">Aggiungi</MudButton>
      }
      @if (EntitiesHref != null)
      {
        <MudButton OnClick="() => navigationManager.NavigateTo(EntitiesHref)">Apri Anagrafica</MudButton>
      }
    </MudStack>
  </BeforeItemsTemplate>
</MudAutocomplete>

@code
{

  [Parameter, EditorRequired]
  public DbContext Context { get; set; } = default!;

  [Parameter]
  public bool Disabled { get; set; } = false;
  [Parameter]
  public T Value { get; set; } = default!;

  [Parameter]
  public EventCallback<T> ValueChanged { get; set; }
  public void ValueChangedHandler(T value)
  {
    ValueChanged.InvokeAsync(value);
  }

  [Parameter]
  public string Label { get; set; } = "";
  [Parameter]
  public Expression<Func<T>> For { get; set; } = default!;

  [Parameter]
  public string EntitiesHref { get; set; } = default!;

  [Parameter]
  public Expression<Func<IEditEntityDialog<T>>> EditDialog { get; set; } = default!;

  [Parameter]
  public Func<T, string> ToStringFunc { get; set; } = p => p?.ToString() ?? "";

  [Parameter, EditorRequired]
  public Func<DbContext, IQueryable<T>> QueryFactory { get; set; } = default!;

  [Parameter, EditorRequired]
  public Func<string, Expression<Func<T, bool>>> SearchExp { get; set; } = default!;

  MudAutocomplete<T> component = default!;

  public async Task<IEnumerable<T>> Search(string value, CancellationToken token)
  {
    var query = QueryFactory(Context);
    if (string.IsNullOrEmpty(value))
      return await query.ToListAsync(token);

    return await query.Where(SearchExp(value)).ToListAsync(token);
  }

  private async Task NewAsync()
  {
    await component.CloseMenuAsync();

    Type dialogType = (EditDialog.Body as NewExpression)!.Type;

    var parameters = new DialogParameters<IEditEntityDialog<T>> {
{ p => p.Context, Context }
};

    var dialog = await dialogService.ShowAsync(dialogType, "Crea Elemento", parameters);

    var shouldSave = await dialog.Result;
    if (shouldSave != null && !shouldSave.Canceled)
    {
      try
      {
        var entry = Context.Attach(shouldSave.Data!);

        await Context.SaveChangesAsync();
        snackbar.Add("Elemento aggiunto con successo", Severity.Success);

        await component.SelectOptionAsync((T)(entry.Entity));
      }
      catch (Exception e)
      {
        logger.LogError(e.Message);
        snackbar.Add("Impossibile aggiungere l'elemento", Severity.Error);
      }
    }
  }
}
