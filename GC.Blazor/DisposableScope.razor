@implements IAsyncDisposable

<CascadingValue Value="this">
  @ChildContent
</CascadingValue>

@code {
  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  private readonly Dictionary<object, Func<ValueTask>> _disposables = new();

  public void AddDisposable<T>(T obj) where T : IDisposable
  {
    if (!_disposables.ContainsKey(obj))
    {
      _disposables.Add(obj, () =>
      {
        obj.Dispose();
        return ValueTask.CompletedTask;
      });
    }
  }
  public void AddAsyncDisposable<T>(T obj) where T : IAsyncDisposable
  {
    if (!_disposables.ContainsKey(obj))
    {
      _disposables.Add(obj, obj.DisposeAsync);
    }
  }

  public void AddDisposable<T>(Func<T> factory) where T : IDisposable
  {
    var obj = factory.Invoke();

    if (!_disposables.ContainsKey(obj))
    {
      _disposables.Add(obj, () =>
      {
        obj.Dispose();
        return ValueTask.CompletedTask;
      });
    }
  }
  public void AddAsyncDisposable<T>(Func<T> factory) where T : IAsyncDisposable
  {
    var obj = factory.Invoke();

    if (!_disposables.ContainsKey(obj))
    {
      _disposables.Add(obj, obj.DisposeAsync);
    }
  }

  public void RemoveDisposable(IDisposable obj)
  {
    if (_disposables.ContainsKey(obj))
    {
      _disposables.Remove(obj);
    }
  }
  public void RemoveDisposable(IAsyncDisposable obj)
  {
    if (_disposables.ContainsKey(obj))
    {
      _disposables.Remove(obj);
    }
  }

  public async ValueTask DisposeAsync()
  {
    foreach (var kv in _disposables)
    {
      try
      {
        await kv.Value();
      }
      catch { }
    }
    _disposables.Clear();
  }
}
